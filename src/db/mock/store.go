// Code generated by MockGen. DO NOT EDIT.
// Source: shopping-cart/src/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	db "shopping-cart/src/db/sqlc"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddDiscount mocks base method.
func (m *MockStore) AddDiscount(arg0 context.Context, arg1 db.AddDiscountParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDiscount indicates an expected call of AddDiscount.
func (mr *MockStoreMockRecorder) AddDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDiscount", reflect.TypeOf((*MockStore)(nil).AddDiscount), arg0, arg1)
}

// AddToCart mocks base method.
func (m *MockStore) AddToCart(arg0 context.Context, arg1 db.AddToCartParams) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockStoreMockRecorder) AddToCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockStore)(nil).AddToCart), arg0, arg1)
}

// AddToCartTx mocks base method.
func (m *MockStore) AddToCartTx(arg0 context.Context, arg1 db.AddToCartTxParam) (db.AddToCartTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCartTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddToCartTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToCartTx indicates an expected call of AddToCartTx.
func (mr *MockStoreMockRecorder) AddToCartTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCartTx", reflect.TypeOf((*MockStore)(nil).AddToCartTx), arg0, arg1)
}

// ChangeQtyTx mocks base method.
func (m *MockStore) ChangeQtyTx(arg0 context.Context, arg1 db.ChangeQtyTxParam) (db.ChangeQtyTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeQtyTx", arg0, arg1)
	ret0, _ := ret[0].(db.ChangeQtyTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeQtyTx indicates an expected call of ChangeQtyTx.
func (mr *MockStoreMockRecorder) ChangeQtyTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeQtyTx", reflect.TypeOf((*MockStore)(nil).ChangeQtyTx), arg0, arg1)
}

// CreateCart mocks base method.
func (m *MockStore) CreateCart(arg0 context.Context, arg1 db.CreateCartParams) (db.UserCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0, arg1)
	ret0, _ := ret[0].(db.UserCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockStoreMockRecorder) CreateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockStore)(nil).CreateCart), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 db.CreateCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreateOrderRecord mocks base method.
func (m *MockStore) CreateOrderRecord(arg0 context.Context, arg1 db.CreateOrderRecordParams) (db.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderRecord", arg0, arg1)
	ret0, _ := ret[0].(db.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderRecord indicates an expected call of CreateOrderRecord.
func (mr *MockStoreMockRecorder) CreateOrderRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderRecord", reflect.TypeOf((*MockStore)(nil).CreateOrderRecord), arg0, arg1)
}

// CreatePaymentRecord mocks base method.
func (m *MockStore) CreatePaymentRecord(arg0 context.Context, arg1 db.CreatePaymentRecordParams) (db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentRecord", arg0, arg1)
	ret0, _ := ret[0].(db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentRecord indicates an expected call of CreatePaymentRecord.
func (mr *MockStoreMockRecorder) CreatePaymentRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentRecord", reflect.TypeOf((*MockStore)(nil).CreatePaymentRecord), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateProductDiscount mocks base method.
func (m *MockStore) CreateProductDiscount(arg0 context.Context, arg1 db.CreateProductDiscountParams) (db.ProductDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.ProductDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductDiscount indicates an expected call of CreateProductDiscount.
func (mr *MockStoreMockRecorder) CreateProductDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductDiscount", reflect.TypeOf((*MockStore)(nil).CreateProductDiscount), arg0, arg1)
}

// CreateProductInventory mocks base method.
func (m *MockStore) CreateProductInventory(arg0 context.Context, arg1 db.CreateProductInventoryParams) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductInventory indicates an expected call of CreateProductInventory.
func (mr *MockStoreMockRecorder) CreateProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductInventory", reflect.TypeOf((*MockStore)(nil).CreateProductInventory), arg0, arg1)
}

// CreateUserAddress mocks base method.
func (m *MockStore) CreateUserAddress(arg0 context.Context, arg1 db.CreateUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAddress", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAddress indicates an expected call of CreateUserAddress.
func (mr *MockStoreMockRecorder) CreateUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAddress", reflect.TypeOf((*MockStore)(nil).CreateUserAddress), arg0, arg1)
}

// CreateUserCredential mocks base method.
func (m *MockStore) CreateUserCredential(arg0 context.Context, arg1 db.CreateUserCredentialParams) (db.UserCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCredential", arg0, arg1)
	ret0, _ := ret[0].(db.UserCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserCredential indicates an expected call of CreateUserCredential.
func (mr *MockStoreMockRecorder) CreateUserCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCredential", reflect.TypeOf((*MockStore)(nil).CreateUserCredential), arg0, arg1)
}

// CreateUserInfo mocks base method.
func (m *MockStore) CreateUserInfo(arg0 context.Context, arg1 db.CreateUserInfoParams) (db.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInfo", arg0, arg1)
	ret0, _ := ret[0].(db.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserInfo indicates an expected call of CreateUserInfo.
func (mr *MockStoreMockRecorder) CreateUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInfo", reflect.TypeOf((*MockStore)(nil).CreateUserInfo), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// DeleteCart mocks base method.
func (m *MockStore) DeleteCart(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockStoreMockRecorder) DeleteCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockStore)(nil).DeleteCart), arg0, arg1)
}

// GetAddress mocks base method.
func (m *MockStore) GetAddress(arg0 context.Context, arg1 uuid.UUID) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockStoreMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockStore)(nil).GetAddress), arg0, arg1)
}

// GetCartByID mocks base method.
func (m *MockStore) GetCartByID(arg0 context.Context, arg1 uuid.UUID) (db.UserCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByID", arg0, arg1)
	ret0, _ := ret[0].(db.UserCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByID indicates an expected call of GetCartByID.
func (mr *MockStoreMockRecorder) GetCartByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByID", reflect.TypeOf((*MockStore)(nil).GetCartByID), arg0, arg1)
}

// GetCartItemDetail mocks base method.
func (m *MockStore) GetCartItemDetail(arg0 context.Context, arg1 uuid.UUID) (db.GetCartItemDetailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemDetail", arg0, arg1)
	ret0, _ := ret[0].(db.GetCartItemDetailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemDetail indicates an expected call of GetCartItemDetail.
func (mr *MockStoreMockRecorder) GetCartItemDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemDetail", reflect.TypeOf((*MockStore)(nil).GetCartItemDetail), arg0, arg1)
}

// GetCartProductDetailList mocks base method.
func (m *MockStore) GetCartProductDetailList(arg0 context.Context, arg1 db.GetCartProductDetailListParams) ([]db.GetCartProductDetailListRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartProductDetailList", arg0, arg1)
	ret0, _ := ret[0].([]db.GetCartProductDetailListRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartProductDetailList indicates an expected call of GetCartProductDetailList.
func (mr *MockStoreMockRecorder) GetCartProductDetailList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartProductDetailList", reflect.TypeOf((*MockStore)(nil).GetCartProductDetailList), arg0, arg1)
}

// GetCartProductList mocks base method.
func (m *MockStore) GetCartProductList(arg0 context.Context, arg1 db.GetCartProductListParams) ([]db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartProductList", arg0, arg1)
	ret0, _ := ret[0].([]db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartProductList indicates an expected call of GetCartProductList.
func (mr *MockStoreMockRecorder) GetCartProductList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartProductList", reflect.TypeOf((*MockStore)(nil).GetCartProductList), arg0, arg1)
}

// GetCategoryDetail mocks base method.
func (m *MockStore) GetCategoryDetail(arg0 context.Context, arg1 uuid.UUID) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryDetail", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryDetail indicates an expected call of GetCategoryDetail.
func (mr *MockStoreMockRecorder) GetCategoryDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryDetail", reflect.TypeOf((*MockStore)(nil).GetCategoryDetail), arg0, arg1)
}

// GetCategoryForUpdate mocks base method.
func (m *MockStore) GetCategoryForUpdate(arg0 context.Context, arg1 uuid.UUID) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryForUpdate indicates an expected call of GetCategoryForUpdate.
func (mr *MockStoreMockRecorder) GetCategoryForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryForUpdate", reflect.TypeOf((*MockStore)(nil).GetCategoryForUpdate), arg0, arg1)
}

// GetDiscountDetail mocks base method.
func (m *MockStore) GetDiscountDetail(arg0 context.Context, arg1 uuid.UUID) (db.ProductDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscountDetail", arg0, arg1)
	ret0, _ := ret[0].(db.ProductDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscountDetail indicates an expected call of GetDiscountDetail.
func (mr *MockStoreMockRecorder) GetDiscountDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscountDetail", reflect.TypeOf((*MockStore)(nil).GetDiscountDetail), arg0, arg1)
}

// GetInventoryDetail mocks base method.
func (m *MockStore) GetInventoryDetail(arg0 context.Context, arg1 uuid.UUID) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryDetail", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryDetail indicates an expected call of GetInventoryDetail.
func (mr *MockStoreMockRecorder) GetInventoryDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryDetail", reflect.TypeOf((*MockStore)(nil).GetInventoryDetail), arg0, arg1)
}

// GetListAddresses mocks base method.
func (m *MockStore) GetListAddresses(arg0 context.Context, arg1 db.GetListAddressesParams) ([]db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListAddresses", arg0, arg1)
	ret0, _ := ret[0].([]db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListAddresses indicates an expected call of GetListAddresses.
func (mr *MockStoreMockRecorder) GetListAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListAddresses", reflect.TypeOf((*MockStore)(nil).GetListAddresses), arg0, arg1)
}

// GetListCategories mocks base method.
func (m *MockStore) GetListCategories(arg0 context.Context) ([]db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCategories", arg0)
	ret0, _ := ret[0].([]db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCategories indicates an expected call of GetListCategories.
func (mr *MockStoreMockRecorder) GetListCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCategories", reflect.TypeOf((*MockStore)(nil).GetListCategories), arg0)
}

// GetNumberAddresses mocks base method.
func (m *MockStore) GetNumberAddresses(arg0 context.Context, arg1 uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberAddresses", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberAddresses indicates an expected call of GetNumberAddresses.
func (mr *MockStoreMockRecorder) GetNumberAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberAddresses", reflect.TypeOf((*MockStore)(nil).GetNumberAddresses), arg0, arg1)
}

// GetOrderItemList mocks base method.
func (m *MockStore) GetOrderItemList(arg0 context.Context, arg1 db.GetOrderItemListParams) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemList", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemList indicates an expected call of GetOrderItemList.
func (mr *MockStoreMockRecorder) GetOrderItemList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemList", reflect.TypeOf((*MockStore)(nil).GetOrderItemList), arg0, arg1)
}

// GetPaymentRecord mocks base method.
func (m *MockStore) GetPaymentRecord(arg0 context.Context, arg1 uuid.UUID) (db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentRecord", arg0, arg1)
	ret0, _ := ret[0].(db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentRecord indicates an expected call of GetPaymentRecord.
func (mr *MockStoreMockRecorder) GetPaymentRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentRecord", reflect.TypeOf((*MockStore)(nil).GetPaymentRecord), arg0, arg1)
}

// GetProductDetail mocks base method.
func (m *MockStore) GetProductDetail(arg0 context.Context, arg1 uuid.UUID) (db.GetProductDetailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetail", arg0, arg1)
	ret0, _ := ret[0].(db.GetProductDetailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetail indicates an expected call of GetProductDetail.
func (mr *MockStoreMockRecorder) GetProductDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetail", reflect.TypeOf((*MockStore)(nil).GetProductDetail), arg0, arg1)
}

// GetProductList mocks base method.
func (m *MockStore) GetProductList(arg0 context.Context, arg1 db.GetProductListParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductList", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductList indicates an expected call of GetProductList.
func (mr *MockStoreMockRecorder) GetProductList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductList", reflect.TypeOf((*MockStore)(nil).GetProductList), arg0, arg1)
}

// GetTotal mocks base method.
func (m *MockStore) GetTotal(arg0 context.Context, arg1 uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockStoreMockRecorder) GetTotal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockStore)(nil).GetTotal), arg0, arg1)
}

// GetUserCredential mocks base method.
func (m *MockStore) GetUserCredential(arg0 context.Context, arg1 string) (db.UserCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredential", arg0, arg1)
	ret0, _ := ret[0].(db.UserCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredential indicates an expected call of GetUserCredential.
func (mr *MockStoreMockRecorder) GetUserCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredential", reflect.TypeOf((*MockStore)(nil).GetUserCredential), arg0, arg1)
}

// GetUserInfoByID mocks base method.
func (m *MockStore) GetUserInfoByID(arg0 context.Context, arg1 uuid.UUID) (db.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByID", arg0, arg1)
	ret0, _ := ret[0].(db.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByID indicates an expected call of GetUserInfoByID.
func (mr *MockStoreMockRecorder) GetUserInfoByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByID", reflect.TypeOf((*MockStore)(nil).GetUserInfoByID), arg0, arg1)
}

// GetUserInfoByUserID mocks base method.
func (m *MockStore) GetUserInfoByUserID(arg0 context.Context, arg1 uuid.UUID) (db.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUserID indicates an expected call of GetUserInfoByUserID.
func (mr *MockStoreMockRecorder) GetUserInfoByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUserID", reflect.TypeOf((*MockStore)(nil).GetUserInfoByUserID), arg0, arg1)
}

// GetUserOrderSummary mocks base method.
func (m *MockStore) GetUserOrderSummary(arg0 context.Context, arg1 db.GetUserOrderSummaryParams) ([]db.GetUserOrderSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrderSummary", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserOrderSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrderSummary indicates an expected call of GetUserOrderSummary.
func (mr *MockStoreMockRecorder) GetUserOrderSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrderSummary", reflect.TypeOf((*MockStore)(nil).GetUserOrderSummary), arg0, arg1)
}

// RemoveDiscount mocks base method.
func (m *MockStore) RemoveDiscount(arg0 context.Context, arg1 uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDiscount indicates an expected call of RemoveDiscount.
func (mr *MockStoreMockRecorder) RemoveDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDiscount", reflect.TypeOf((*MockStore)(nil).RemoveDiscount), arg0, arg1)
}

// RemoveFromCartTx mocks base method.
func (m *MockStore) RemoveFromCartTx(arg0 context.Context, arg1 db.RemoveFromCartTxParam) (db.RemoveFromCartTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCartTx", arg0, arg1)
	ret0, _ := ret[0].(db.RemoveFromCartTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFromCartTx indicates an expected call of RemoveFromCartTx.
func (mr *MockStoreMockRecorder) RemoveFromCartTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCartTx", reflect.TypeOf((*MockStore)(nil).RemoveFromCartTx), arg0, arg1)
}

// RemoveItem mocks base method.
func (m *MockStore) RemoveItem(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockStoreMockRecorder) RemoveItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockStore)(nil).RemoveItem), arg0, arg1)
}

// UpdateCartItemQty mocks base method.
func (m *MockStore) UpdateCartItemQty(arg0 context.Context, arg1 db.UpdateCartItemQtyParams) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItemQty", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartItemQty indicates an expected call of UpdateCartItemQty.
func (mr *MockStoreMockRecorder) UpdateCartItemQty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItemQty", reflect.TypeOf((*MockStore)(nil).UpdateCartItemQty), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateDiscount mocks base method.
func (m *MockStore) UpdateDiscount(arg0 context.Context, arg1 db.UpdateDiscountParams) (db.ProductDiscount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.ProductDiscount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiscount indicates an expected call of UpdateDiscount.
func (mr *MockStoreMockRecorder) UpdateDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscount", reflect.TypeOf((*MockStore)(nil).UpdateDiscount), arg0, arg1)
}

// UpdatePaymentStatus mocks base method.
func (m *MockStore) UpdatePaymentStatus(arg0 context.Context, arg1 db.UpdatePaymentStatusParams) (db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", arg0, arg1)
	ret0, _ := ret[0].(db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockStoreMockRecorder) UpdatePaymentStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockStore)(nil).UpdatePaymentStatus), arg0, arg1)
}

// UpdateProductInventory mocks base method.
func (m *MockStore) UpdateProductInventory(arg0 context.Context, arg1 db.UpdateProductInventoryParams) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductInventory indicates an expected call of UpdateProductInventory.
func (mr *MockStoreMockRecorder) UpdateProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductInventory", reflect.TypeOf((*MockStore)(nil).UpdateProductInventory), arg0, arg1)
}
