// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAddressBookStmt, err = db.PrepareContext(ctx, createAddressBook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAddressBook: %w", err)
	}
	if q.createUserCredentialStmt, err = db.PrepareContext(ctx, createUserCredential); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserCredential: %w", err)
	}
	if q.createUserInfoStmt, err = db.PrepareContext(ctx, createUserInfo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserInfo: %w", err)
	}
	if q.getListAddressesStmt, err = db.PrepareContext(ctx, getListAddresses); err != nil {
		return nil, fmt.Errorf("error preparing query GetListAddresses: %w", err)
	}
	if q.getNumberAddressesStmt, err = db.PrepareContext(ctx, getNumberAddresses); err != nil {
		return nil, fmt.Errorf("error preparing query GetNumberAddresses: %w", err)
	}
	if q.getUserCredentialStmt, err = db.PrepareContext(ctx, getUserCredential); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserCredential: %w", err)
	}
	if q.getUserInfoByIDStmt, err = db.PrepareContext(ctx, getUserInfoByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserInfoByID: %w", err)
	}
	if q.getUserInfoByUserIDStmt, err = db.PrepareContext(ctx, getUserInfoByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserInfoByUserID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAddressBookStmt != nil {
		if cerr := q.createAddressBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAddressBookStmt: %w", cerr)
		}
	}
	if q.createUserCredentialStmt != nil {
		if cerr := q.createUserCredentialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserCredentialStmt: %w", cerr)
		}
	}
	if q.createUserInfoStmt != nil {
		if cerr := q.createUserInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserInfoStmt: %w", cerr)
		}
	}
	if q.getListAddressesStmt != nil {
		if cerr := q.getListAddressesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getListAddressesStmt: %w", cerr)
		}
	}
	if q.getNumberAddressesStmt != nil {
		if cerr := q.getNumberAddressesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNumberAddressesStmt: %w", cerr)
		}
	}
	if q.getUserCredentialStmt != nil {
		if cerr := q.getUserCredentialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserCredentialStmt: %w", cerr)
		}
	}
	if q.getUserInfoByIDStmt != nil {
		if cerr := q.getUserInfoByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserInfoByIDStmt: %w", cerr)
		}
	}
	if q.getUserInfoByUserIDStmt != nil {
		if cerr := q.getUserInfoByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserInfoByUserIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createAddressBookStmt    *sql.Stmt
	createUserCredentialStmt *sql.Stmt
	createUserInfoStmt       *sql.Stmt
	getListAddressesStmt     *sql.Stmt
	getNumberAddressesStmt   *sql.Stmt
	getUserCredentialStmt    *sql.Stmt
	getUserInfoByIDStmt      *sql.Stmt
	getUserInfoByUserIDStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createAddressBookStmt:    q.createAddressBookStmt,
		createUserCredentialStmt: q.createUserCredentialStmt,
		createUserInfoStmt:       q.createUserInfoStmt,
		getListAddressesStmt:     q.getListAddressesStmt,
		getNumberAddressesStmt:   q.getNumberAddressesStmt,
		getUserCredentialStmt:    q.getUserCredentialStmt,
		getUserInfoByIDStmt:      q.getUserInfoByIDStmt,
		getUserInfoByUserIDStmt:  q.getUserInfoByUserIDStmt,
	}
}
