// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_address (
    id,
    owner,
    address_name,
    address,
    city,
    state,
    zipcode
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, owner, address_name, address, city, state, zipcode, created_at
`

type CreateUserAddressParams struct {
	ID          uuid.UUID `json:"id"`
	Owner       uuid.UUID `json:"owner"`
	AddressName string    `json:"address_name"`
	Address     string    `json:"address"`
	City        string    `json:"city"`
	State       string    `json:"state"`
	Zipcode     int32     `json:"zipcode"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.queryRow(ctx, q.createUserAddressStmt, createUserAddress,
		arg.ID,
		arg.Owner,
		arg.AddressName,
		arg.Address,
		arg.City,
		arg.State,
		arg.Zipcode,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AddressName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.CreatedAt,
	)
	return i, err
}

const createUserCredential = `-- name: CreateUserCredential :one
INSERT INTO user_credential (
    id,
    username,
    hashed_password,
    email
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, hashed_password, email, password_changed_at, is_admin, created_at
`

type CreateUserCredentialParams struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	Email          string    `json:"email"`
}

func (q *Queries) CreateUserCredential(ctx context.Context, arg CreateUserCredentialParams) (UserCredential, error) {
	row := q.queryRow(ctx, q.createUserCredentialStmt, createUserCredential,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
	)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const createUserInfo = `-- name: CreateUserInfo :one
INSERT INTO user_info (
    id,
    user_id,
    phone_number,
    first_name,
    last_name,
    middle_name
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING  id, user_id, phone_number, first_name, last_name, middle_name, updated_at, created_at
`

type CreateUserInfoParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	PhoneNumber string    `json:"phone_number"`
	FirstName   string    `json:"first_name"`
	LastName    string    `json:"last_name"`
	MiddleName  string    `json:"middle_name"`
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) (UserInfo, error) {
	row := q.queryRow(ctx, q.createUserInfoStmt, createUserInfo,
		arg.ID,
		arg.UserID,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.MiddleName,
	)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAddress = `-- name: GetAddress :one
SELECT id, owner, address_name, address, city, state, zipcode, created_at FROM user_address
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id uuid.UUID) (UserAddress, error) {
	row := q.queryRow(ctx, q.getAddressStmt, getAddress, id)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AddressName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zipcode,
		&i.CreatedAt,
	)
	return i, err
}

const getListAddresses = `-- name: GetListAddresses :many
SELECT id, owner, address_name, address, city, state, zipcode, created_at FROM user_address
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetListAddressesParams struct {
	Owner  uuid.UUID `json:"owner"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetListAddresses(ctx context.Context, arg GetListAddressesParams) ([]UserAddress, error) {
	rows, err := q.query(ctx, q.getListAddressesStmt, getListAddresses, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.AddressName,
			&i.Address,
			&i.City,
			&i.State,
			&i.Zipcode,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberAddresses = `-- name: GetNumberAddresses :one
SELECT COUNT(*) FROM user_address
WHERE owner = $1
LIMIT 1
`

func (q *Queries) GetNumberAddresses(ctx context.Context, owner uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.getNumberAddressesStmt, getNumberAddresses, owner)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserCredential = `-- name: GetUserCredential :one
SELECT id, username, hashed_password, email, password_changed_at, is_admin, created_at FROM user_credential
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserCredential(ctx context.Context, username string) (UserCredential, error) {
	row := q.queryRow(ctx, q.getUserCredentialStmt, getUserCredential, username)
	var i UserCredential
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getUserInfoByID = `-- name: GetUserInfoByID :one
SELECT id, user_id, phone_number, first_name, last_name, middle_name, updated_at, created_at FROM user_info
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserInfoByID(ctx context.Context, id uuid.UUID) (UserInfo, error) {
	row := q.queryRow(ctx, q.getUserInfoByIDStmt, getUserInfoByID, id)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserInfoByUserID = `-- name: GetUserInfoByUserID :one
SELECT id, user_id, phone_number, first_name, last_name, middle_name, updated_at, created_at FROM user_info
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetUserInfoByUserID(ctx context.Context, userID uuid.UUID) (UserInfo, error) {
	row := q.queryRow(ctx, q.getUserInfoByUserIDStmt, getUserInfoByUserID, userID)
	var i UserInfo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.MiddleName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
