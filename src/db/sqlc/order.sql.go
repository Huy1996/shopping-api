// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: order.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"shopping-cart/src/util"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_item (
    id,
    order_id,
    product_id,
    quantity,
    status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, order_id, product_id, quantity, status, created_at, updated_at
`

type CreateOrderItemParams struct {
	ID        uuid.UUID        `json:"id"`
	OrderID   uuid.UUID        `json:"order_id"`
	ProductID uuid.UUID        `json:"product_id"`
	Quantity  int32            `json:"quantity"`
	Status    util.OrderStatus `json:"status"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.queryRow(ctx, q.createOrderItemStmt, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Status,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderRecord = `-- name: CreateOrderRecord :one
INSERT INTO order_detail (
    id,
    user_id,
    total,
    payment_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, total, payment_id, created_at, updated_at
`

type CreateOrderRecordParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Total     float64   `json:"total"`
	PaymentID uuid.UUID `json:"payment_id"`
}

func (q *Queries) CreateOrderRecord(ctx context.Context, arg CreateOrderRecordParams) (OrderDetail, error) {
	row := q.queryRow(ctx, q.createOrderRecordStmt, createOrderRecord,
		arg.ID,
		arg.UserID,
		arg.Total,
		arg.PaymentID,
	)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPaymentRecord = `-- name: CreatePaymentRecord :one
INSERT INTO payment_detail (
    id,
    amount,
    type,
    status,
    card_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, amount, type, status, card_number, created_at, updated_at
`

type CreatePaymentRecordParams struct {
	ID         uuid.UUID          `json:"id"`
	Amount     float64            `json:"amount"`
	Type       util.PaymentType   `json:"type"`
	Status     util.PaymentStatus `json:"status"`
	CardNumber string             `json:"card_number"`
}

func (q *Queries) CreatePaymentRecord(ctx context.Context, arg CreatePaymentRecordParams) (PaymentDetail, error) {
	row := q.queryRow(ctx, q.createPaymentRecordStmt, createPaymentRecord,
		arg.ID,
		arg.Amount,
		arg.Type,
		arg.Status,
		arg.CardNumber,
	)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemList = `-- name: GetOrderItemList :many
SELECT id, order_id, product_id, quantity, status, created_at, updated_at FROM order_item
WHERE order_id = $1
LIMIT $2
OFFSET $3
`

type GetOrderItemListParams struct {
	OrderID uuid.UUID `json:"order_id"`
	Limit   int32     `json:"limit"`
	Offset  int32     `json:"offset"`
}

func (q *Queries) GetOrderItemList(ctx context.Context, arg GetOrderItemListParams) ([]OrderItem, error) {
	rows, err := q.query(ctx, q.getOrderItemListStmt, getOrderItemList, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentRecord = `-- name: GetPaymentRecord :one
SELECT id, amount, type, status, card_number, created_at, updated_at FROM payment_detail
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPaymentRecord(ctx context.Context, id uuid.UUID) (PaymentDetail, error) {
	row := q.queryRow(ctx, q.getPaymentRecordStmt, getPaymentRecord, id)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserOrderSummary = `-- name: GetUserOrderSummary :many
SELECT
	order_detail.id,
	amount as total,
	(SELECT COUNT(*) FROM order_item WHERE order_id = order_detail.id) as number_product
FROM order_detail
LEFT JOIN payment_detail
    ON order_detail.payment_id = payment_detail.id
WHERE order_detail.user_id = $1
LIMIT $2
OFFSET $3
`

type GetUserOrderSummaryParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

type GetUserOrderSummaryRow struct {
	ID            uuid.UUID       `json:"id"`
	Total         sql.NullFloat64 `json:"total"`
	NumberProduct int64           `json:"number_product"`
}

func (q *Queries) GetUserOrderSummary(ctx context.Context, arg GetUserOrderSummaryParams) ([]GetUserOrderSummaryRow, error) {
	rows, err := q.query(ctx, q.getUserOrderSummaryStmt, getUserOrderSummary, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserOrderSummaryRow{}
	for rows.Next() {
		var i GetUserOrderSummaryRow
		if err := rows.Scan(&i.ID, &i.Total, &i.NumberProduct); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payment_detail
SET
    status = $1,
    updated_at = now()
WHERE id = $2
RETURNING id, amount, type, status, card_number, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	Status util.PaymentStatus `json:"status"`
	ID     uuid.UUID          `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (PaymentDetail, error) {
	row := q.queryRow(ctx, q.updatePaymentStatusStmt, updatePaymentStatus, arg.Status, arg.ID)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
