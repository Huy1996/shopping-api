// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"shopping-cart/src/util"
)

const createPaymentRecord = `-- name: CreatePaymentRecord :one
INSERT INTO payment_detail (
    id,
    amount,
    type,
    status,
    card_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, amount, type, status, card_number, created_at, updated_at
`

type CreatePaymentRecordParams struct {
	ID         uuid.UUID          `json:"id"`
	Amount     float64            `json:"amount"`
	Type       util.PaymentType   `json:"type"`
	Status     util.PaymentStatus `json:"status"`
	CardNumber string             `json:"card_number"`
}

func (q *Queries) CreatePaymentRecord(ctx context.Context, arg CreatePaymentRecordParams) (PaymentDetail, error) {
	row := q.queryRow(ctx, q.createPaymentRecordStmt, createPaymentRecord,
		arg.ID,
		arg.Amount,
		arg.Type,
		arg.Status,
		arg.CardNumber,
	)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentRecord = `-- name: GetPaymentRecord :one
SELECT id, amount, type, status, card_number, created_at, updated_at FROM payment_detail
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPaymentRecord(ctx context.Context, id uuid.UUID) (PaymentDetail, error) {
	row := q.queryRow(ctx, q.getPaymentRecordStmt, getPaymentRecord, id)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payment_detail
SET
    status = $1,
    updated_at = now()
WHERE id = $2
RETURNING id, amount, type, status, card_number, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	Status util.PaymentStatus `json:"status"`
	ID     uuid.UUID          `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (PaymentDetail, error) {
	row := q.queryRow(ctx, q.updatePaymentStatusStmt, updatePaymentStatus, arg.Status, arg.ID)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Type,
		&i.Status,
		&i.CardNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
